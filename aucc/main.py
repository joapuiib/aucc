"""
Copyright (c) 2019, Rodrigo Gomes.
Distributed under the terms of the MIT License.
The full license is in the file LICENSE, distributed with this software.
Created on May 22, 2019
@author: @rodgomesc
"""
import argparse
import textwrap
import sys
import os
from aucc.core.handler import DeviceHandler
import time
from aucc.core.colors import (get_mono_color_vector,
                              get_h_alt_color_vector,
                              get_v_alt_color_vector,
                              _colors_available)


light_style = {
    # Byte  Purpose     Notes
    # 0     ???         0x08 to issue commands?
    # 1     ???         0x02 to issue commands? Other values seem to cause failure. 0x01 appears to switch off lights
    # 2     Program     The 'effect' in use
    # 3     Speed       0x0?: 1,2,3,4,5,6,7,8,9,a (fastest to slowest)
    # 4     Brightness  0x08, 0x16, 0x24, 0x32
    # 5     Colour      0x0?: 1 red, 2 orange, 3 yellow, 4 green, 5 blue, 6 teal, 7 purple, 8 rainbow
    # 6     Program?    Required to be changed for some effects
    # 7     save changes (00 for no, 01 for yes)

    # Rainbow - No further settings available
    'rainbow': (0x08, 0x02, 0x05, 0x05, 0x24, 0x00, 0x00, 0x00),
    # Marquee (only accepts rainbow)
    'marquee': (0x08, 0x02, 0x09, 0x05, 0x24, 0x08, 0x00, 0x00),
    # Wave - No further settings available
    'wave': (0x08, 0x02, 0x03, 0x05, 0x24, 0x00, 0x01, 0x00),
    # Raindrop red
    'raindropr': (0x08, 0x02, 0x0A, 0x05, 0x24, 0x01, 0x00, 0x00),
    # Raindrop orange
    'raindropo': (0x08, 0x02, 0x0A, 0x05, 0x24, 0x02, 0x00, 0x00),
    # Raindrop yellow
    'raindropy': (0x08, 0x02, 0x0A, 0x05, 0x24, 0x03, 0x00, 0x00),
    # Raindrop green
    'raindropg': (0x08, 0x02, 0x0A, 0x05, 0x24, 0x04, 0x00, 0x00),
    # Raindrop blue
    'raindropb': (0x08, 0x02, 0x0A, 0x05, 0x24, 0x05, 0x00, 0x00),
    # Raindrop teal
    'raindropt': (0x08, 0x02, 0x0A, 0x05, 0x24, 0x06, 0x00, 0x00),
    # Raindrop purple
    'raindropp': (0x08, 0x02, 0x0A, 0x05, 0x24, 0x07, 0x00, 0x00),
    # Raindrop rainbow
    'raindrop': (0x08, 0x02, 0x0A, 0x05, 0x24, 0x08, 0x00, 0x00),
    # Aurora red
    'aurorar': (0x08, 0x02, 0x0E, 0x05, 0x24, 0x01, 0x00, 0x00),
    # Aurora orange
    'aurorao': (0x08, 0x02, 0x0E, 0x05, 0x24, 0x02, 0x00, 0x00),
    # Aurora yellow
    'auroray': (0x08, 0x02, 0x0E, 0x05, 0x24, 0x03, 0x00, 0x00),
    # Aurora green
    'aurorag': (0x08, 0x02, 0x0E, 0x05, 0x24, 0x04, 0x00, 0x00),
    # Aurora blue
    'aurorab': (0x08, 0x02, 0x0E, 0x05, 0x24, 0x05, 0x00, 0x00),
    # Aurora teal
    'aurorat': (0x08, 0x02, 0x0E, 0x05, 0x24, 0x06, 0x00, 0x00),
    # Aurora purple
    'aurorap': (0x08, 0x02, 0x0E, 0x05, 0x24, 0x07, 0x00, 0x00),
    # Aurora rainbow
    'aurora': (0x08, 0x02, 0x0E, 0x05, 0x24, 0x08, 0x00, 0x00),
    # Random key red
    'randomr': (0x08, 0x02, 0x04, 0x05, 0x24, 0x01, 0x00, 0x00),
    # Random keyorange
    'randomo': (0x08, 0x02, 0x04, 0x05, 0x24, 0x02, 0x00, 0x00),
    # Random key yellow
    'randomy': (0x08, 0x02, 0x04, 0x05, 0x24, 0x03, 0x00, 0x00),
    # Random key green
    'randomg': (0x08, 0x02, 0x04, 0x05, 0x24, 0x04, 0x00, 0x00),
    # Random key blue
    'randomb': (0x08, 0x02, 0x04, 0x05, 0x24, 0x05, 0x00, 0x00),
    # Random key teal
    'randomt': (0x08, 0x02, 0x04, 0x05, 0x24, 0x06, 0x00, 0x00),
    # Random key purple
    'randomp': (0x08, 0x02, 0x04, 0x05, 0x24, 0x07, 0x00, 0x00),
    # Random key rainbow
    'random': (0x08, 0x02, 0x04, 0x05, 0x24, 0x08, 0x00, 0x00),
    # Reactive red
    'reactiver': (0x08, 0x02, 0x04, 0x05, 0x24, 0x01, 0x01, 0x00),
    # Reactive orange
    'reactiveo': (0x08, 0x02, 0x04, 0x05, 0x24, 0x02, 0x01, 0x00),
    # Reactive yellow
    'reactivey': (0x08, 0x02, 0x04, 0x05, 0x24, 0x03, 0x01, 0x00),
    # Reactive green
    'reactiveg': (0x08, 0x02, 0x04, 0x05, 0x24, 0x04, 0x01, 0x00),
    # Reactive blue
    'reactiveb': (0x08, 0x02, 0x04, 0x05, 0x24, 0x05, 0x01, 0x00),
    # Reactive teal
    'reactivet': (0x08, 0x02, 0x04, 0x05, 0x24, 0x06, 0x01, 0x00),
    # Reactive purple
    'reactivep': (0x08, 0x02, 0x04, 0x05, 0x24, 0x07, 0x01, 0x00),
    # Reactive rainbow
    'reactive': (0x08, 0x02, 0x04, 0x05, 0x24, 0x08, 0x01, 0x00),
    # Breathing red
    'breathingr': (0x08, 0x02, 0x02, 0x05, 0x24, 0x01, 0x00, 0x00),
    # Breathing orange
    'breathingo': (0x08, 0x02, 0x02, 0x05, 0x24, 0x02, 0x00, 0x00),
    # Breathing yellow
    'breathingy': (0x08, 0x02, 0x02, 0x05, 0x24, 0x03, 0x00, 0x00),
    # Breathing green
    'breathingg': (0x08, 0x02, 0x02, 0x05, 0x24, 0x04, 0x00, 0x00),
    # Breathing blue
    'breathingb': (0x08, 0x02, 0x02, 0x05, 0x24, 0x05, 0x00, 0x00),
    # Breathing teal
    'breathingt': (0x08, 0x02, 0x02, 0x05, 0x24, 0x06, 0x00, 0x00),
    # Breathing purple
    'breathingp': (0x08, 0x02, 0x02, 0x05, 0x24, 0x07, 0x00, 0x00),
    # Breathing rainbow
    'breathing': (0x08, 0x02, 0x02, 0x05, 0x24, 0x08, 0x00, 0x00),
    # Ripple red
    'rippler': (0x08, 0x02, 0x06, 0x05, 0x24, 0x01, 0x00, 0x00),
    # Ripple orange
    'rippleo': (0x08, 0x02, 0x06, 0x05, 0x24, 0x02, 0x00, 0x00),
    # Ripple yellow
    'rippley': (0x08, 0x02, 0x06, 0x05, 0x24, 0x03, 0x00, 0x00),
    # Ripple green
    'rippleg': (0x08, 0x02, 0x06, 0x05, 0x24, 0x04, 0x00, 0x00),
    # Ripple blue
    'rippleb': (0x08, 0x02, 0x06, 0x05, 0x24, 0x05, 0x00, 0x00),
    # Ripple teal
    'ripplet': (0x08, 0x02, 0x06, 0x05, 0x24, 0x06, 0x00, 0x00),
    # Ripple purple
    'ripplep': (0x08, 0x02, 0x06, 0x05, 0x24, 0x07, 0x00, 0x00),
    # Ripple rainbow
    'ripple': (0x08, 0x02, 0x06, 0x05, 0x24, 0x08, 0x00, 0x00),
    # Reactive ripple red
    'reactiverippler': (0x08, 0x02, 0x07, 0x05, 0x24, 0x01, 0x00, 0x00),
    # Reactive ripple orange
    'reactiverippleo': (0x08, 0x02, 0x07, 0x05, 0x24, 0x02, 0x00, 0x00),
    # Reactive ripple yellow
    'reactiverippley': (0x08, 0x02, 0x07, 0x05, 0x24, 0x03, 0x00, 0x00),
    # Reactive ripple green
    'reactiverippleg': (0x08, 0x02, 0x07, 0x05, 0x24, 0x04, 0x00, 0x00),
    # Reactive ripple blue
    'reactiverippleb': (0x08, 0x02, 0x07, 0x05, 0x24, 0x05, 0x00, 0x00),
    # Reactive ripple teal
    'reactiveripplet': (0x08, 0x02, 0x07, 0x05, 0x24, 0x06, 0x00, 0x00),
    # Reactive ripple purple
    'reactiveripplep': (0x08, 0x02, 0x07, 0x05, 0x24, 0x07, 0x00, 0x00),
    # Reactive ripple rainbow
    'reactiveripple': (0x08, 0x02, 0x07, 0x05, 0x24, 0x08, 0x00, 0x00),
    # Reactive aurora red
    'reactiveaurorar': (0x08, 0x02, 0x0e, 0x05, 0x24, 0x01, 0x01, 0x00),
    # Reactive aurora orange
    'reactiveaurorao': (0x08, 0x02, 0x0e, 0x05, 0x24, 0x02, 0x01, 0x00),
    # Reactive aurora yellow
    'reactiveauroray': (0x08, 0x02, 0x0e, 0x05, 0x24, 0x03, 0x01, 0x00),
    # Reactive aurora green
    'reactiveaurorag': (0x08, 0x02, 0x0e, 0x05, 0x24, 0x04, 0x01, 0x00),
    # Reactive aurora blue
    'reactiveaurorab': (0x08, 0x02, 0x0e, 0x05, 0x24, 0x05, 0x01, 0x00),
    # Reactive aurora teal
    'reactiveaurorat': (0x08, 0x02, 0x0e, 0x05, 0x24, 0x06, 0x01, 0x00),
    # Reactive aurora purple
    'reactiveaurorap': (0x08, 0x02, 0x0e, 0x05, 0x24, 0x07, 0x01, 0x00),
    # Reactive aurora rainbow
    'reactiveaurora': (0x08, 0x02, 0x0e, 0x05, 0x24, 0x08, 0x01, 0x00),
    # Fireworks red
    'fireworksr': (0x08, 0x02, 0x11, 0x05, 0x24, 0x01, 0x01, 0x00),
    # Fireworks orange
    'fireworkso': (0x08, 0x02, 0x11, 0x05, 0x24, 0x02, 0x01, 0x00),
    # Fireworks yellow
    'fireworksy': (0x08, 0x02, 0x11, 0x05, 0x24, 0x03, 0x01, 0x00),
    # Fireworks green
    'fireworksg': (0x08, 0x02, 0x11, 0x05, 0x24, 0x04, 0x01, 0x00),
    # Fireworks blue
    'fireworksb': (0x08, 0x02, 0x11, 0x05, 0x24, 0x05, 0x01, 0x00),
    # Fireworks teal
    'fireworkst': (0x08, 0x02, 0x11, 0x05, 0x24, 0x06, 0x01, 0x00),
    # Fireworks purple
    'fireworksp': (0x08, 0x02, 0x11, 0x05, 0x24, 0x07, 0x01, 0x00),
    # Fireworks rainbow
    'fireworks': (0x08, 0x02, 0x11, 0x05, 0x24, 0x08, 0x01, 0x00)
}

# Keyboard brightness has 4 variations 0x08,0x16,0x24,0x32
brightness_map = {
    1: 0x08,
    2: 0x16,
    3: 0x24,
    4: 0x32
}


class ControlCenter(DeviceHandler):
    def __init__(self, vendor_id, product_id):
        super(ControlCenter, self).__init__(vendor_id, product_id)
        self.brightness = None

    def disable_keyboard(self):
        self.ctrl_write(0x08, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)

    def keyboard_style(self, style):
        self.ctrl_write(*light_style[style])

    def adjust_brightness(self, brightness=None):
        if brightness:
            self.brightness = brightness
            self.ctrl_write(0x08, 0x02, 0x33, 0x00,
                            brightness_map[self.brightness], 0x00, 0x00, 0x00)
        else:
            self.adjust_brightness(4)

    def color_scheme_setup(self, save_changes=0x01):
        '''
        options available: (0x00 for no, 0x01 for yes)
        purpose: write changes on chip to keep current color on reboot
        '''
        self.ctrl_write(0x12, 0x00, 0x00, 0x08, save_changes, 0x00, 0x00, 0x00)

    def mono_color_setup(self, color_scheme):

        if self.brightness:
            self.color_scheme_setup()
            color_vector = get_mono_color_vector(color_scheme)
            self.bulk_write(times=8, payload=color_vector)
        else:
            self.adjust_brightness()
            self.mono_color_setup(color_scheme)

    def h_alt_color_setup(self, color_scheme_a, color_scheme_b):

        self.color_scheme_setup()
        color_vector = get_h_alt_color_vector(color_scheme_a, color_scheme_b)
        self.bulk_write(times=8, payload=color_vector)

    def v_alt_color_setup(self, color_scheme_a, color_scheme_b):

        self.color_scheme_setup()
        color_vector = get_v_alt_color_vector(color_scheme_a, color_scheme_b)
        self.bulk_write(times=8, payload=color_vector)


def main():
    from elevate import elevate

    if not os.geteuid() == 0:
        elevate()

    control = ControlCenter(vendor_id=0x048d, product_id=0xce00)

    parser = argparse.ArgumentParser(
        description=textwrap.dedent('''
            Supply at least one of the options [-c|-H|-V|-s|-d].
                
            Colors available:
            [red|green|blue|teal|pink|purple|white|yellow|orange|olive|maroon|brown|gray|skyblue|navy|crimson|darkgreen|lightgreen|gold|violet] '''),
        formatter_class=argparse.RawDescriptionHelpFormatter)

    parser.add_argument(
        '-c', '--color', help='Select a single color for all keys.')
    parser.add_argument(
        '-b', '--brightness', help='Set brightness, 1 is minimum, 4 is maximum.', type=int, choices=range(1, 5))
    parser.add_argument('-H', '--h-alt', nargs=2,
                        help='Horizontal alternating colors')
    parser.add_argument('-V', '--v-alt', nargs=2,
                        help='Vertical alternating colors')
    parser.add_argument('-s', '--style',
                        help='One of (rainbow, marquee, wave, raindrop, aurora, random, reactive, breathing, ripple, reactiveripple, reactiveaurora, fireworks). Additional single colors are available for the following styles: raindrop, aurora, random, reactive, breathing, ripple, reactiveripple, reactiveaurora and fireworks. These colors are: Red (r), Orange (o), Yellow (y), Green (g), Blue (b), Teal (t), Purple (p). Append those styles with the start letter of the color you would like (e.g. rippler = Ripple Red')
    parser.add_argument('-d', '--disable', action='store_true',
                        help='Turn keyboard backlight off'),

    parsed = parser.parse_args()
    if parsed.disable:
        control.disable_keyboard()
    if parsed.brightness:
        control.adjust_brightness(int(parsed.brightness))
    if parsed.color:
        control.mono_color_setup(parsed.color)
    elif parsed.h_alt:
        control.h_alt_color_setup(*parsed.h_alt)
    elif parsed.v_alt:
        control.v_alt_color_setup(*parsed.v_alt)
    elif parsed.style:
        control.keyboard_style(parsed.style)
    else:
        print("Invalid or absent command")


if __name__ == "__main__":
    main()
